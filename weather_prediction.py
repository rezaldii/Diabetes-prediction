# -*- coding: utf-8 -*-
"""Weather-Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ngU0LCnJmYolapUCdMViMW2TMxONJZnu

# Proyek Predictive Analytics: Weather-Prediction
- Nama: Rezaldi
- Email: rezaldi30082003@students.amikom.ac.id
- Id Dicoding: rezaldi_20113717
- Dataset: https://www.kaggle.com/datasets/ananthr1/weather-prediction

## Import library
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score, classification_report

"""## Data Loading"""

# Load dataset
df = pd.read_csv("seattle-weather.csv")

# Preview dataset
df.head()

"""DataFrame berisi 6 kolom. Kolom-kolom tersebut adalah:
- date: menunjukkan tanggal pengamatan cuaca.
- precipitation: menunjukkan jumlah curah hujan.
- temp_max: menunjukkan suhu maksimum.
- temp_min: menunjukkan suhu minimum.
- wind: menunjukkan kecepatan angin.
- weather: menunjukkan kondisi cuaca.

## Exploratory Data Analysis
"""

df.info()

"""tipe data date dan weather adalah objek. mungkin bisa dikonversi ke datetime dan tipe data kategori untuk analisis yang lebih baik."""

df['date'] = pd.to_datetime(df['date'])
df['weather'] = df['weather'].astype('category')

df.info()

"""dari hasil diatas sudah menampilkan perubahan tipe data date dan weather"""

# Statistik Deskriptif
df.describe()

"""- precipitation: Jumlah rata-rata curah hujan adalah sekitar 3,03, menunjukkan fluktuasi yang patut dicatat (standar deviasi sekitar 6,68). Data yang berkaitan dengan curah hujan berkisar dari 0 hingga 55,9.
- temp_max: suhu maksimum rata-rata kira-kira 16,44, dengan jumlah variasi yang sederhana (standar deviasi sekitar 7,35). Suhu maksimum berfluktuasi antara -1,6 hingga 35,6.
- temp_min: suhu minimum rata-rata adalah sekitar 8,23, dengan variasi sedang (standar deviasi sekitar 5,02). Suhu minimum berosilasi antara -7,1 hingga 18,3.
- wind: kecepatan angin rata-rata sekitar 3,24, dengan jumlah variasi sedang (standar deviasi sekitar 1,44). Kecepatan angin berkisar dari 0,4 hingga 9,5.
"""

# Check outliers precipitation
plt.boxplot(df["precipitation"])
plt.title("Outliers Precipitation")
plt.show()

# Check outliers temp_max
plt.boxplot(df["temp_max"])
plt.title("Outliers Temp Max")
plt.show()

# Check outliers temp_min
plt.boxplot(df["temp_min"])
plt.title("Outliers Temp Min")
plt.show()

# Check outliers wind
plt.boxplot(df["wind"])
plt.title("Outliers Wind")
plt.show()

"""Berdasarkan output boxplot, dapat dilihat bahwa terdapat outlier pada precipitation dan wind."""

Q1 = df['precipitation'].quantile(0.25)
Q3 = df['precipitation'].quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

df = df[(df['precipitation'] >= lower_bound) & (df['precipitation'] <= upper_bound)]

Q1 = df['wind'].quantile(0.25)
Q3 = df['wind'].quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

df = df[(df['wind'] >= lower_bound) & (df['wind'] <= upper_bound)]

# Boxplot precipitation setelah outliers dihapus
plt.boxplot(df["precipitation"])
plt.title("Precipitation Setelah Menghapus Outliers")
plt.show()

# Boxplot wind setelah outliers dihapus
plt.boxplot(df["wind"])
plt.title("Wind Setelah Menghapus Outliers")
plt.show()

"""Berdasrkan output telah berhasil menghapus outliers di precipitation dan wind"""

# Memisahkan numerical features dan categorical features
numerical_features = df.select_dtypes(include=['float64'])  # Memilih kolom-kolom dengan tipe data float64
categorical_features = df.select_dtypes(include=['category'])  # Memilih kolom-kolom dengan tipe data category

# Menampilkan numerical features
print("Numerical Features:")
print(numerical_features.head())

# Menampilkan categorical features
print("\nCategorical Features:")
print(categorical_features.head())

"""berdasarkan output diatas telah berhasil memisahkan dataset berdasarkan kategori yaitu Numerical Features dan Categorical Features"""

weather_counts = df['weather'].value_counts()

plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='weather', order=weather_counts.index)
plt.title('Distribusi Cuaca')
plt.xlabel('Cuaca')
plt.ylabel('Frekuensi')
plt.xticks(rotation=45)
plt.show()

"""- Kategori cuaca yang paling sering muncul dalam dataset adalah "rain"
- Kategori cuaca "sun" memiliki kemunculan yang hampir sama dengan "rain"
- Kategori cuaca "fog" memiliki kemunculan yang lebih sedikit dibandingkan dengan "rain" dan "sun"
- "drizzle" dan "snow" adalah kategori cuaca yang lebih jarang terjadi
"""

plt.figure(figsize=(12, 6))
sns.lineplot(data=df, x='date', y='temp_max', hue='weather', ci=None)
plt.title('Perubahan Suhu Maksimum seiring Cuaca')
plt.xlabel('Tanggal')
plt.ylabel('Suhu Maksimum')
plt.xticks(rotation=45)
plt.show()

"""Dengan output ini, dapat memahami bagaimana variabel cuaca memengaruhi variabel suhu."""

numerical_features = numerical_features.describe()
print(numerical_features)

"""Output yang ditampilkan adalah hasil dari penghitungan statistik deskriptif untuk fitur-fitur numerik, yang meliputi "precipitation," "temp_max," "temp_min," dan "wind."
"""

plt.figure(figsize=(12, 6))
plt.subplot(2, 2, 1)
sns.histplot(df['precipitation'], bins=20, kde=True)
plt.title('Distribusi Precipitation')

plt.subplot(2, 2, 2)
sns.histplot(df['temp_max'], bins=20, kde=True)
plt.title('Distribusi Temp Max')

plt.subplot(2, 2, 3)
sns.histplot(df['temp_min'], bins=20, kde=True)
plt.title('Distribusi Temp Min')

plt.subplot(2, 2, 4)
sns.histplot(df['wind'], bins=20, kde=True)
plt.title('Distribusi Wind')

plt.tight_layout()
plt.show()

"""Output menampilkan visualisasi distribusi dari masing-masing fitur numerik."""

correlation_matrix = df[['precipitation', 'temp_max', 'temp_min', 'wind']].corr()
print(correlation_matrix)
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Matriks Korelasi')
plt.show()

"""- Terdapat korelasi negatif yang lemah (-0.34) antara tingkat presipitasi ("precipitation") dan suhu maksimum ("temp_max").
- Terdapat korelasi positif yang kuat (0.88) antara suhu maksimum ("temp_max") dan suhu minimum ("temp_min").
- Korelasi antara suhu minimum ("temp_min") dan tingkat presipitasi ("precipitation") serta kecepatan angin ("wind") adalah lemah dan mendekati nol, menunjukkan bahwa tidak ada korelasi yang signifikan antara variabel-variabel ini.
- Terdapat korelasi negatif yang lemah (-0.16) antara suhu maksimum ("temp_max") dan kecepatan angin ("wind").
"""

sns.pairplot(df[['precipitation', 'temp_max', 'temp_min', 'wind']])
plt.show()

"""dengan output ini kita bisa melihat hubungan antara semua pasangan variabel numerik sekaligus

## Data Preparation
"""

# Encoding fitur kategori
label_encoder = LabelEncoder()
df['weather_encoded'] = label_encoder.fit_transform(df['weather'])

"""menggunakan LabelEncoder untuk mengubah fitur kategori weather menjadi angka"""

# Reduksi dimensi dengan PCA
pca = PCA(n_components=2)
pca_result = pca.fit_transform(df[['precipitation', 'temp_max', 'temp_min', 'wind']])

"""menggunakan PCA untuk mereduksi dimensi fitur numerik menjadi 2 komponen."""

# Pembagian dataset menjadi data latih dan data uji
X = df[['precipitation', 'temp_max', 'temp_min', 'wind']]
y = df['weather_encoded']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""menggunakan 80% data sebagai data latih dan 20% data sebagai data uji."""

# Standarisasi fitur numerik
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""menggunakan StandardScaler untuk melakukan standarisasi pada fitur numerik agar memiliki mean 0 dan standar deviasi 1

## Model Development
"""

# Create a KNN classifier
knn = KNeighborsClassifier(n_neighbors=10)

# Train the KNN model
knn.fit(X_train_scaled, y_train)

# Make predictions on the training and test sets
y_train_pred = knn.predict(X_train_scaled)
y_test_pred = knn.predict(X_test_scaled)

# Evaluate the model on the training set
train_accuracy = accuracy_score(y_train, y_train_pred)
print("Training Accuracy (KNN):", train_accuracy)

# Evaluate the model on the test set
test_accuracy = accuracy_score(y_test, y_test_pred)
print("Test Accuracy (KNN):", test_accuracy)

# Generate a classification report
class_report = classification_report(y_test, y_test_pred, target_names=label_encoder.classes_)
print("Classification Report (KNN):\n", class_report)

"""- Model KNN memiliki akurasi yang cukup baik (sekitar 78%).
- Model ini lebih baik dalam memprediksi kelas "rain" dan "sun" daripada kelas-kelas lainnya.
- Model memiliki kesulitan dalam mengklasifikasikan kelas-kelas minor seperti "drizzle", "fog", dan "snow".
"""

# Create a Random Forest classifier
random_forest = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the Random Forest model
random_forest.fit(X_train_scaled, y_train)

# Make predictions on the training and test sets
y_train_pred_rf = random_forest.predict(X_train_scaled)
y_test_pred_rf = random_forest.predict(X_test_scaled)

# Evaluate the model on the training set
train_accuracy_rf = accuracy_score(y_train, y_train_pred_rf)
print("Training Accuracy (Random Forest):", train_accuracy_rf)

# Evaluate the model on the test set
test_accuracy_rf = accuracy_score(y_test, y_test_pred_rf)
print("Test Accuracy (Random Forest):", test_accuracy_rf)

# Generate a classification report
class_report_rf = classification_report(y_test, y_test_pred_rf, target_names=label_encoder.classes_)
print("Classification Report (Random Forest):\n", class_report_rf)

"""Model Random Forest memiliki tingkat akurasi yang baik pada data uji, mencapai sekitar 81.89%. Namun, ada beberapa kelas (seperti 'drizzle', 'fog', dan 'snow') di mana model memiliki kinerja yang kurang baik dengan precision dan recall rendah. Ini menunjukkan bahwa model kemungkinan tidak cukup baik dalam memprediksi cuaca-cuaca tersebut."""

# Create a Gradient Boosting classifier
gradient_boosting = GradientBoostingClassifier(n_estimators=100, random_state=42)

# Train the Gradient Boosting model
gradient_boosting.fit(X_train_scaled, y_train)

# Make predictions on the training and test sets
y_train_pred_gb = gradient_boosting.predict(X_train_scaled)
y_test_pred_gb = gradient_boosting.predict(X_test_scaled)

# Evaluate the model on the training set
train_accuracy_gb = accuracy_score(y_train, y_train_pred_gb)
print("Training Accuracy (Gradient Boosting):", train_accuracy_gb)

# Evaluate the model on the test set
test_accuracy_gb = accuracy_score(y_test, y_test_pred_gb)
print("Test Accuracy (Gradient Boosting):", test_accuracy_gb)

# Generate a classification report
class_report_gb = classification_report(y_test, y_test_pred_gb, target_names=label_encoder.classes_)
print("Classification Report (Gradient Boosting):\n", class_report_gb)

"""model Gradient Boosting memiliki akurasi yang baik pada data uji sekitar 80.25%. Namun, performa model bervariasi di antara kelas-kelas cuaca, dengan kelas "rain" memiliki performa terbaik."""